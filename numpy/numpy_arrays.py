print()
print()
print()
print("                                 *** Section 5:  Pandas ***")
print()
import numpy as np
print(" import numpy as np                               # numpy has been imported as np.")
print() 

print("=====================================================================================================================")
print()
pythonList = [1, 2, 3] 
print(" pythonList =", pythonList, "                           # Create Python List")                       
print()
print()
npArray = np.array(pythonList)
print(" npArray = np.array(pythonList)")
print(" npArray =", npArray, "                                # Should show as npArray = ([1 2 3])")
print()
print("=====================================================================================================================")
print()

npMatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(" npMatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]      # Create npMatrix")
print(" npMatrix =", npMatrix, "     # Print npMatrix.")
print()
arrFromMatrix = np.array(npMatrix)
print(" arrFromMatrix = np.array(npMatrix)", "               # Create array from matrix.")
print(" arrFromMatrix = \n", arrFromMatrix)
print()
print("=====================================================================================================================")
print()

print("The arange(start, stop) function creates an array from 1 to (stop -1)")
arr = np.arange(0, 10)
print(" arr = np.arange(0, 10)")
print(" arr =", arr)
print()
print("=====================================================================================================================")
print()

print(" arange function also has an optional step size.")
arr = np.arange(0, 10, 2)
print(" arr = np.arange(0, 10, 2)                         # Create numpy array using arange(start, stop + 1, step) function")
print(" arr =", arr)
print()
print("=====================================================================================================================")
print()

print(" The zeros() function creates an array filled with 0's.")
arr = np.zeros(5)
print(" arr = np.zeros(5)")
print(" arr =", arr, "                           # Note the zeros created are float, not integer.")
print()
print("=====================================================================================================================")
print()

print(" The zeros(rows, cols) function creates a matrix[rows, cols] filled with 0's.")
arr = np.zeros((3, 4))
print(" arr = np.zeros((3, 4))                            # Note the use of double parens to create a matrix.")
print(" arr =", arr)
print()
print("=====================================================================================================================")
print()

print(" The ones() function creates an array filled with 1s.")
arr = np.ones(5)
print(" arr = np.ones(5)")
print(" arr =", arr, "                           # Note the 1's created are float, not integer.")
print()
print("=====================================================================================================================")
print()

print(" The ones(rows, cols) function creates a matrix[rows, cols] filled with 1's.")
arr = np.ones((3, 4))
print(" arr = np.ones((3, 4))                            # Note the use of double parens to create a matrix.")
print(" arr =", arr)
print()
print("=====================================================================================================================")
print()

print(" The linspace(start, stop, interval) function creates an array starting at start, ending at stop,")
print(" evenly spaced over interval entries.")
arr = np.linspace(0, 1, 10)
print(" arr =")
print(arr)
print()
print("=====================================================================================================================")
print()

print(" An identity matrix is a matrix is one with all 0's except for 1's going in a diagonal down")
print(" from left to right.  The effect of multiplying a matrix by the identity matrix is to leave")
print(" leave the original matrix unchanged.")
print()
print(" The syntax to create an identity matrix in numpy is 'numpy.eye(size).")
print(" np.eye(4) =")
print(np.eye(4))
print()
print(" To specify an unequal size, use numpy.eye(rows, cols)")
print(" np.eye(3, 4) =")
print(np.eye(3, 4))
print()
print("=====================================================================================================================")
print()

print(" To create an array of randonm numbers, the most common method is to use the")
print(" numpy.random.randint(start, stop, size) function.")
print()
print(" To create an array of 10 integers from 0 thru 49 use:")
print(" arr = np.random.randint(0, 50, 10)")
arr = np.random.randint(0, 50, 10)
print(" arr = ", arr)
print()
print("=====================================================================================================================")
print()

print(" The reshape() function changes the dimension of the original arry to those specified in the")
print(" the reshape( function).  The syntax is array_name.reshape(new dimensions).  Starting with")
print(" arr previous example, (arr = np.random.randint0, 50, 10)")
arr = np.random.randint(0, 50, 10)
print(" arr = ", arr)
print()
print(" We can change the shape of arr to 2 dimensions of 2 rows and 5 columns with arr.reshape(2, 5)")
print()
print(" arr = arr.reshape(2, 5)")
arr = arr.reshape(2, 5)
print(" arr = ")
print(arr)
print()
print()
print(" Likewise, we can change the shape of arr back to 1 dimension:")
print()
print(" arr = arr.reshape(10)")
arr = arr.reshape(10)
print(" arr = ")
print(arr)
print()
print(" *** The overall number of elements in the new shape must match that of the old! ***")
print(" *** Otherwise, you will generate a runtime error. ***")
print()
print("=====================================================================================================================")
print()

print(" The array.max() function will return the largest element in an array")
print()
arr = np.random.randint(0, 50, 15)
print(" Given arr = np.random.randint(0, 50, 15)")
print(" arr =", arr)
biggest = arr.max()
print(" biggest = arr.max()")
print(" biggest =", biggest)
print()
print("=====================================================================================================================")
print()

print(" The array.argmax() function will return the index of the largest element in an array")
print(" *** Remember:  numpy arrays are 0-indexed!")
print()
print(" arr =", arr)
biggest = arr.max()
print(" The index of the biggest = arr.argmax()")
argbiggest = arr.argmax()
print(" argbiggest =", argbiggest)
print()
print("=====================================================================================================================")
print()

print(" The array.min() function will return the smallest element in an array")
print(" Using the same array as the min() function example...")
print()
print(" arr =", arr)
smallest = arr.min()
print(" smallest = arr.min()")
print(" smallest =", smallest)
print()
print("=====================================================================================================================")
print()

print(" The array.argmin() function will return the index of the smallest element in an array")
print(" *** Remember:  numpy arrays are 0-indexed!")
print()
print(" arr =", arr)
biggest = arr.argmax()
print(" The index of the smallest = arr.argmin()")
argsmallest = arr.argmin()
print(" argbsmallest =", argsmallest)
print()
print("=====================================================================================================================")
print()

print(" The Numpy attribute 'array.shape' will return the shape of an numpy array.")
print(" arr = np.zeros((5, 5))")
print()
arr = np.zeros((5, 5))
print(" arr:")
print(arr)
print()
print(" shap = arr.shape")
shap = arr.shape
print(" shap =", shap)
print()
print("=====================================================================================================================")
print()

print(" The Numpy attribute 'array.dtype' will return the type of an numpy array's contents.")
print(" arr = np.zeros((5, 5))")
print()
arr = np.zeros((5, 5))
print(" arr:")
print(arr)
print()
print(" type = arr.dtype")
type = arr.dtype
print(" type =", type)
print()
print(" You can verify the results for yourself by observing the decimal point in the array values.")
print()
print("=====================================================================================================================")
print()

print(" Numpy array syntax is extremely similar to Python arrays. and like the. are 0-based.")
print()
print(" arr = np.arange(0, 11)")
arr = np.arange(0, 11)
print()
print(" arr =", arr)
print(" arr[7] =", arr[7])
print(" arr[2:5] =", arr[2:5])
print(" arr[:5] =", arr[:5])
print(" arr[5:] =", arr[5:])
print(" You can verify the results for yourself by observing the decimal point in the array values.")
print()
print("=====================================================================================================================")
print()

print(" Numpy array values can be set with a simple or multiple assignment statement.")
print()
arr = np.arange(0, 16)
print(" arr = np.arange(0, 16)")
#arr = np.arange(0, 11)
print(" arr =", arr)
print()
arr[1] = 21
print(" arr[1] =", arr[1])
print(" arr =", arr)
print()
arr[8:10] = 0
print(" arr[8] =", arr[8])
print(" arr[9] =", arr[9])
print(" arr =", arr)
print()
print()
print(" Reset arr = np.arange(0, 11)")
arr = np.arange(0, 11)
print(" arr =", arr)
print()
arrSlice = arr[0:6]
print(" arrSlice = arr[0:6]")
print(" arrSlice =", arrSlice)
arrSlice = arr[0:6]
print(" arrSlice = arr[0:6]")
print(" arrSlice =", arrSlice)
arrSlice[:] = 99
print(" arrSlice[:] = 99")
print(" arrSlice =", arrSlice)
print(" arr =", arr)
print()
print("This can be changed to a more expected result by using the following syntax...")
print()
print(" Reset arr = np.arange(0, 11)")
arr = np.arange(0, 11)
print(" arr =", arr)
print()
arrSlice[:] = 100
print(" arrSlice[:] = 100")
print(" arrSlice =", arrSlice)
print(" arr=", arr)
print()
print("=====================================================================================================================")
print()
print(" 2D matrixes are arrays, but the are important differences.")
print()
arr2d = np.array([[5, 10, 15], [20, 25, 30], [35, 40, 45]])
print(" arr2d = np.array([[5, 10, 15], [25, 30, 35], [40, 45, 50]])")
print()
print(" arr2d:")
print(arr2d)
print()
print(" ar-r2d.shape is", arr2d.shape)
#print("type(arr2d) is", type(arr2d))  # WHY DOES THIS FAIL????
print()
print()
print(" There are two methods for accessing a numpy matrix (2D array).  One method uses two set of")
print(" square brackets, and the second uses one set of square brackets and a comma as a separater.")
print()
print(" To access the 4th element (25)...")
print(" (2 set of square brackets:  arr2d[1][1] =", arr2d[1][1])
print(" (Square brackets w/ comma:  arr2d[1, 1] =", arr2d[1, 1])
print()
print(" To access the 6th element (35)...")
print(" (2 set of square brackets:  arr2d[2][0] =", arr2d[2][0])
print(" (Square brackets w/ comma:  arr2d[2, 0] =", arr2d[2, 0])
print()
print(" To extract a section (10, 15, 25, 30) use slice notation.")
print("Step 1: arr2d[:2]\n")
print(arr2d[:2])
print()
print("Step 2: arr2d[:2, 1:]\n")
print(arr2d[:2, 1:])
print()
print("Most people prefer one set of brackets and a comma, but you can use whichever you prefer.")
print()
print("=====================================================================================================================")
print()
arr = np.arange(1, 11)
print("arr = np.arange(1, 11)")
print("arr =", arr)
print()
print("A boolean array can be cast from the integer array:")
print("arr > 5 =", arr > 5)
print()
print("The results can be stored in another array:")
bool_arr = arr > 5
print("bool_arr = arr > 5")
print("bool_arr =", bool_arr)
print()
print("The new array can be applied to the old...")
print("arr[bool_arr] =", arr[bool_arr])
print()
print("=====================================================================================================================")
print()
print("arr = np.arange(0, 11)")
arr = np.arange(0, 11)
print("print(arr)")
print("arr =", arr)
print("arr + arr =", arr + arr)
print("arr - arr =", arr - arr)
print("arr * arr =", arr * arr)
print("arr / arr =", arr / arr)
print("Note:  Numpy issues a warning instead of an error when dividinf by 0.")
print()
print("Scalars may also be applied to Numpy arrays:")
print("arr + 100 =", arr + 100)
print("arr ** 2 =", arr ** 2)
print()
print("Universal Array Functions are broadcast across the array.")
print()
print("Square Root:")
print("arrx = np.sqrt(arr)")
arrx = np.sqrt(arr)
print("arrx =", arrx)
print()
print("Exponent:")
print("arrx = np.exp(arr)")
arrx = np.exp(arr)
print("arrx =", arrx)
print()
print("Maximum:")
print("arrx = np.max(arr)")
arrx = np.max(arr)
print("arrx =", arrx)
print()
print("Recall that array.max() can also bo used.")
print()
print("Sine:")
print("arrx = np.sin(arr)")
arrx = np.sin(arr)
print("arrx =", arrx)
print()
print("Sine:")
print("arrx = np.sin(arr)")
arrx = np.log(arr)
print("arrx =", arrx)
print()
